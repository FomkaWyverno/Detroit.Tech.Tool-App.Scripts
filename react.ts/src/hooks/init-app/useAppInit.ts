import { LocalizationKey } from '../../models/localization/LocalizationKey';
import { useCallback, useContext, useEffect, useState } from "react";
import useFetch from "../useFetch";
import { LocalizationData } from "../../types/localization/localization";
import { groupByVoiceCode, groupLocKeyTextByCode, groupLocSheetKeyByContainerIdAndKey, mapLocalizationToKeyText } from '../../utils/LocalizationUtil';
import { AppScripts } from '../../services/app-scripts/AppScripts';
import { Sheet } from '../../models/sheet/Sheet';
import { parseSheetToLocalizationSheetKeys } from '../../utils/SheetUtil';
import { LocalizationSheetKey } from '../../models/localization/LocalizationSheetKey';
import { delay } from '../../utils/Utils';
import { PromiseUtils } from '../../utils/PromiseUtils';
import { ActorNamesContext } from '../../context/ActorNamesContex';

const localizationDataURL = 'https://raw.githubusercontent.com/FomkaWyverno/Detroit.Tech.Tool-App.Scripts.github.io/refs/heads/react.js/Detroit_LocalizationRegistry.json';

const enum STATE {
    DEFAULT = '–ï—Ç–∞–ø-1: –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–ª—é—á—ñ–≤ –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—ó... ‚è≥',
    PROCCESSING_LOC_DATA = '–ï—Ç–∞–ø-1: –û–±—Ä–æ–±–ª—é—î–º–æ –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ–π–Ω—ñ –∫–ª—é—á—ñ! üîÑ',
    APP_SCRIPTS_INIT = '–ï—Ç–∞–ø-2: –Ü–Ω—ñ—Ü—ñ–ª—ñ–∑–∞—Ü—ñ—ó –∑ App-Scripts ‚öôÔ∏è',
    APP_SCRIPTS_SHEETS_NAMES = '–ï—Ç–∞–ø-2: –û—Ç—Ä–∏–º—É—î–º–æ –Ω–∞–∑–≤–∏ –∞—Ä–∫—É—à—ñ–≤. üìë',
    APP_SCRIPTS_SHEET_GET_VALUES = '–ï—Ç–∞–ø-2: –ß–∏—Ç–∞—î–º–æ –∞—Ä–∫—É—à—ñ üîç:',
    PROCESS_KEYS = '–ï—Ç–∞–ø-3: –û–ø—Ä–∞—Ü—å–æ–≤—É—î–º–æ –æ—Ç—Ä–∏–º–∞–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é üß©üõ†Ô∏è',
    ERROR = "–°—Ç–∞–ª–∞—Å—å –ø–æ–º–∏–ª–∫–∞! üò©üö®"
}

/**
 * –ö–∞—Å—Ç–æ–º–Ω–∏–π —Ö—É–∫ –¥–ª—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –∑–∞—Å—Ç–æ—Å—É–Ω–∫—É.
 * –í–∏–∫–æ–Ω—É—î –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ–π–Ω–∏—Ö –∫–ª—é—á—ñ–≤, —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î App Scripts
 * TODO: –£ —Ä–æ–∑—Ä–æ–±—Ü—ñ
 *
 * @returns {[boolean, string, string, number, Map<string, LocalizationKey>]} 
 * –ú–∞—Å–∏–≤ –∑—ñ —Å—Ç–∞–Ω–æ–º —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó, —Å—Ç–∞—Ç—É—Å–æ–º, –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º –ø—Ä–æ –ø–æ–º–∏–ª–∫—É, –ø—Ä–æ–≥—Ä–µ—Å–æ–º —ñ –º–∞–ø–æ—é –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ–π–Ω–∏—Ö –∫–ª—é—á—ñ–≤.
 */
function useAppInit(): [
    isInitializeApp: boolean,
    state: string,
    error: string,
    progress: number,
    locKeyByCode: Map<string, LocalizationKey>,
    locSheetKeysByIdKey: Map<string, LocalizationSheetKey>
] {
    const [isInitializeApp, setInitializeApp] = useState<boolean>(false);
    const [state, setState] = useState<string>(STATE.DEFAULT);
    const [error_msg, setErrorMsg] = useState<string>('');
    const [progress, setProgress] = useState<number>(-1);

    // –°—Ö–æ–≤–∏—â–µ –¥–ª—è –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ–π–Ω–∏—Ö –∫–ª—é—á—ñ–≤
    const [locData, loading, errorFetch] = useFetch<LocalizationData>(localizationDataURL);

    // –û–±—Ä–æ–±–ª–µ–Ω—ñ –¥–∞–Ω–Ω—ñ —Ç–∞–±–ª–∏—Ü—ñ —Ç–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞ –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—è
    const [locSheetKeys, setLocSheetKeys] = useState<Map<string,LocalizationSheetKey>>(new Map());
    const [locSheetKeysByIdKey, setLocSheetKeysByIdKey] = useState<Map<string, LocalizationKey>>(new Map()) // –ú–∞–ø–∞ —è–∫–∞ –º–∞—î –∫–ª—é—á —Ü–µ –∫–æ–¥, –∞ –∑–Ω–∞—á–µ–Ω–Ω—è —Ü–µ –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ–π–Ω–∏–π –∫–ª—é—á, –∑ –æ—Ä–∏–≥—ñ–Ω—É–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª—É
    const { dispatchActorNames } = useContext(ActorNamesContext);  // –ö–æ–Ω—Ç–µ–∫—Å—Ç —è–∫–∏–π –∫–µ—Ä—É—î –ú–∞–ø–æ—é —è–∫–∞ –º–∞—î –∫–ª—é—á —Ü–µ –≥–æ–ª–æ—Å–æ–≤–∏–π –∫–ª—é—á, –∞ –∑–Ω–∞—á–µ–Ω–Ω—è —Ü–µ –º–∞—Å—Å–∏–≤ —ñ–º–µ–Ω –¥–ª—è —Ü—å–æ–≥–æ –∫–ª—é—á–∞, –∑ —Ç–∞–±–ª–∏—Ü—ñ

    useEffect(() => {
        if (errorFetch) {
            setState(STATE.ERROR);
            setErrorMsg(errorFetch);
        }
    },[errorFetch]);

    const appInit = useCallback(async () => {
        try { // –í–∏–∫–ª–∏–∫ —Ñ—É–Ω–∫—Ü—ñ—ó –≤—ñ–¥–±—É–≤–∞—î—Ç—å—Å—è, –ª–∏—à–µ —Ç–æ–¥—ñ –∫–æ–ª–∏ locData –Ω–µ null —Ç–æ–º—É, –º–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ç—É—Ç –≤—Å–µ –≥–∞—Ä–∞–∑–¥ –±—É–¥–µ.
            setState(STATE.PROCCESSING_LOC_DATA);
            const keysGroup = groupKeysByCode(locData!);
            setLocSheetKeysByIdKey(keysGroup);

            setState(STATE.APP_SCRIPTS_INIT);
            // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –µ–∫–∑–µ–º–ø–ª—è—Ä–∞ AppScripts
            const appScripts = await AppScripts.getInstance();
            const sheets: Array<Sheet> = await processSheets(appScripts, setState, setProgress); // –û–±—Ä–æ–±–ª—é—î–º–æ —Ç–∞–±–ª–∏—Ü—é

            setState(STATE.PROCESS_KEYS); // –û–±—Ä–æ–±–ª—é—î–º–æ –¥–∞–Ω—ñ –∑ —Ç–∞–±–ª–∏—Ü—ñ
            const keys: LocalizationSheetKey[] = sheets.flatMap(sheet => parseSheetToLocalizationSheetKeys(sheet)); // –ü–∞—Ä—Å–∏–º–æ –¥–∞–Ω—ñ –≤ –º–æ–¥–µ–ª—ñ –∫–ª—é—á—ñ–≤ –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—ó
            setLocSheetKeys(groupLocSheetKeyByContainerIdAndKey(keys));
            const group = groupByVoiceCode(keys);
            console.log(group); 
            dispatchActorNames({type: "INIT_ACTOR_NAMES", payload: group}); // –Ü–Ω—ñ—Ü—ñ–ª—ñ–∑—É—î–º–æ —ñ–º–µ–Ω–∞ –∞–∫—Ç–æ—Ä—ñ–≤

            setInitializeApp(true);
        } catch (e) {
            console.error('–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞!!!');
            console.error(e);
            setState(STATE.ERROR);
            setErrorMsg(e instanceof Error ? e.message : String(e));
        }
    }, [dispatchActorNames, locData]);

    useEffect(() => {
        if (!loading && locData && !isInitializeApp) appInit();

    }, [loading, locData, isInitializeApp, appInit]);

    return [isInitializeApp, state, error_msg, progress, locSheetKeysByIdKey, locSheetKeys];
}

export default useAppInit;

/**
 * –ì—Ä—É–ø—É—î –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ–π–Ω—ñ –∫–ª—é—á—ñ –∑–∞ –∫–æ–¥–æ–º.
 * 
 * @param {LocalizationData} locData –û–±'—î–∫—Ç –∑ –¥–∞–Ω–∏–º–∏ –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—ó.
 * @returns {Map<string, LocalizationKey>} –ú–∞–ø–∞ –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ–π–Ω–∏—Ö –∫–ª—é—á—ñ–≤, –∑–≥—Ä—É–ø–æ–≤–∞–Ω–∏—Ö –∑–∞ –∫–æ–¥–∞–º–∏.
 */
function groupKeysByCode(locData: LocalizationData): Map<string, LocalizationKey> {
    return groupLocKeyTextByCode(mapLocalizationToKeyText(locData));
}

async function processSheets(
    appScripts: AppScripts,
    setState: (state: string) => void,
    setProgress: (progress: number) => void
): Promise<Array<Sheet>> {
    setState(STATE.APP_SCRIPTS_SHEETS_NAMES);

    // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–∞–∑–≤ –∞—Ä–∫—É—à—ñ–≤
    const sheetsNames: string[] = await appScripts.scripts.getSheetNames();
    console.log(sheetsNames);

    setProgress(0);
    const total = sheetsNames.length;
    let completed = 0;

    const processSheet = async (sheetName: string): Promise<Sheet> => {
        const sheetValue: string[][] = await appScripts.scripts.getValueSheet(sheetName); // –û—Ç—Ä–∏–º—É—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –∑ —Ç–∞–±–ª–∏—Ü—ñ –∑ AppScripts
        completed++; // –ó–±—ñ–ª—å—à—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ª—ñ—á–∏–ª—å–Ω–∏–∫ –∞—Ä–∫—É—à—ñ–≤ –∑ —è–∫–∏—Ö –æ—Ç—Ä–∏–º–∞–Ω–æ –≤–º—ñ—Å—Ç
        setState(`${STATE.APP_SCRIPTS_SHEET_GET_VALUES} ${completed} –∑ ${total}`); // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω, –¥–ª—è —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —Å–∫—ñ–ª—å–∫–∏ –≤–∂–µ –æ–ø—Ä–∞—Ü—å–æ–≤–∞–Ω–æ –∞—Ä–∫—É—à—ñ–≤
        setProgress(completed / total); // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –Ω–æ–≤–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å
        if (!sheetValue) throw new Error(`–ê—Ä–∫—É—à: "${sheetName}" –Ω–µ–º–∞—î –≤–º—ñ—Å—Ç—É!`); // –Ø–∫—â–æ –∑–Ω–∞—á–µ–Ω–Ω—è –Ω–µ –ø—Ä–∏–π—à–æ, —Å–ø–æ–≤—ñ—â—É—î–º–æ –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
        return new Sheet(sheetName, sheetValue); // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –ê—Ä–∫—É—à.
    }

    const sheets: Sheet[] = await PromiseUtils.allWithLimit<Sheet>(sheetsNames.map(sheetName => () => processSheet(sheetName)), AppScripts.SIMULTANEOUS_CALLS);

    await delay(2000);
    // –û–±–Ω—É–ª–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –ø—Ä–æ—Ü–µ—Å—É
    setProgress(-1)
    return sheets;
}