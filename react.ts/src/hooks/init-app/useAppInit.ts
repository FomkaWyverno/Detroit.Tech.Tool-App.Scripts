import { LocalizationKeyText } from './../../models/localization/LocalizationKeyText';
import { useEffect, useState } from "react";
import useFetch from "../useFetch";
import { LocalizationData } from "../../types/localization/localization";
import { groupLocKeyTextByCode, mapLocalizationToKeyText } from '../../utils/LocalizationUtil';
import { AppScripts } from '../../services/app-scripts/AppScripts';

const localizationDataURL = 'https://raw.githubusercontent.com/FomkaWyverno/Detroit.Tech.Tool-App.Scripts.github.io/refs/heads/react.js/Detroit_LocalizationRegistry.json';

const enum STATE {
    DEFAULT = '–ï—Ç–∞–ø-1: –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–ª—é—á—ñ–≤ –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—ó... ‚è≥',
    PROCCESSING_LOC_DATA = '–ï—Ç–∞–ø-1: –û–±—Ä–æ–±–ª—é—î–º–æ –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ–π–Ω—ñ –∫–ª—é—á—ñ! üîÑ',
    APP_SCRIPTS_INIT = '–ï—Ç–∞–ø-2: –Ü–Ω—ñ—Ü—ñ–ª—ñ–∑–∞—Ü—ñ—ó –∑ App-Scripts ‚öôÔ∏è',
    APP_SCRIPTS_SHEETS_NAMES = '–ï—Ç–∞–ø-2: –û—Ç—Ä–∏–º—É—î–º–æ –Ω–∞–∑–≤–∏ –∞—Ä–∫—É—à—ñ–≤. üìë',
    APP_SCRIPTS_SHEET_GET_VALUES = '–ï—Ç–∞–ø-2: –ß–∏—Ç–∞—î–º–æ –∞—Ä–∫—É—à üîç:',
    ERROR = "–°—Ç–∞–ª–∞—Å—å –ø–æ–º–∏–ª–∫–∞! üò©üö®"
}

/**
 * –ö–∞—Å—Ç–æ–º–Ω–∏–π —Ö—É–∫ –¥–ª—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –∑–∞—Å—Ç–æ—Å—É–Ω–∫—É.
 * –í–∏–∫–æ–Ω—É—î –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ–π–Ω–∏—Ö –∫–ª—é—á—ñ–≤, —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î App Scripts
 * TODO: –£ —Ä–æ–∑—Ä–æ–±—Ü—ñ
 *
 * @returns {[boolean, string, string, number, Map<string, LocalizationKeyText>]} 
 * –ú–∞—Å–∏–≤ –∑—ñ —Å—Ç–∞–Ω–æ–º —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó, —Å—Ç–∞—Ç—É—Å–æ–º, –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º –ø—Ä–æ –ø–æ–º–∏–ª–∫—É, –ø—Ä–æ–≥—Ä–µ—Å–æ–º —ñ –º–∞–ø–æ—é –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ–π–Ω–∏—Ö –∫–ª—é—á—ñ–≤.
 */
function useAppInit(): [
    isInitializeApp: boolean,
    state: string,
    error: string,
    progress: number,
    mapLocKeyByCode: Map<string, LocalizationKeyText>
] {
    const [isInitializeApp, setInitializeApp] = useState<boolean>(false);
    const [state, setState] = useState<string>(STATE.DEFAULT);
    const [error_msg, setErrorMsg] = useState<string>('');
    const [progress, setProgress] = useState<number>(-1);
    // –°—Ö–æ–≤–∏—â–µ –¥–ª—è –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ–π–Ω–∏—Ö –∫–ª—é—á—ñ–≤
    const [mapLocKeyByCode, setMapLocKeyByCode] = useState<Map<string, LocalizationKeyText>>(new Map());
    const [locData, loading, error] = useFetch<LocalizationData>(localizationDataURL);

    useEffect(() => {
        if (error) {
            setState(STATE.ERROR);
            setErrorMsg(error);
            return;
        } 
        if (!locData || loading) return;


        setState(STATE.PROCCESSING_LOC_DATA);
        setMapLocKeyByCode(groupKeysByCode(locData));
        setState(STATE.APP_SCRIPTS_INIT);
        (async () => {
            try {
                // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –µ–∫–∑–µ–º–ø–ª—è—Ä–∞ AppScripts
                const appScripts = await AppScripts.getInstance();
                setState(STATE.APP_SCRIPTS_SHEETS_NAMES);

                // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–∞–∑–≤ –∞—Ä–∫—É—à—ñ–≤
                const sheets: Array<string> = await appScripts.scripts.getSheetNames();
                console.log(sheets);

                setProgress(0);
                const total = sheets.length;
                // –ü–µ—Ä–µ–±—ñ—Ä –∫–æ–∂–Ω–æ–≥–æ –∞—Ä–∫—É—à–∞ —Ç–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –π–æ–≥–æ –≤–º—ñ—Å—Ç—É
                for (let i = 0; i < total; i++) {
                    const sheetName = sheets[i];
                    setState(`${STATE.APP_SCRIPTS_SHEET_GET_VALUES} "${sheetName}" ${i + 1} –∑ ${total}`);
                    const sheetValue: string[][] = await appScripts.scripts.getValueSheet(sheetName);
                    setProgress((i + 1) / total);
                    if (!sheetValue) {
                        throw new Error(`–ê—Ä–∫—É—à: "${sheetName}" –Ω–µ–º–∞—î –≤–º—ñ—Å—Ç—É!`)
                    }
                }
                // –û–±–Ω—É–ª–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –ø—Ä–æ—Ü–µ—Å—É
                setTimeout(() => setProgress(-1), 2000);
            } catch (e) {
                console.error('–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞!!!');
                console.error(e);
                setState(STATE.ERROR);
                if (e instanceof Error) {
                    setErrorMsg(e.message);
                } else {
                    setErrorMsg(String(e));
                }
            }
        })();

    }, [error, loading, locData]);

    return [isInitializeApp, state, error_msg, progress, mapLocKeyByCode];
}

export default useAppInit;

/**
 * –ì—Ä—É–ø—É—î –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ–π–Ω—ñ –∫–ª—é—á—ñ –∑–∞ –∫–æ–¥–æ–º.
 * 
 * @param {LocalizationData} locData –û–±'—î–∫—Ç –∑ –¥–∞–Ω–∏–º–∏ –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—ó.
 * @returns {Map<string, LocalizationKeyText>} –ú–∞–ø–∞ –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ–π–Ω–∏—Ö –∫–ª—é—á—ñ–≤, –∑–≥—Ä—É–ø–æ–≤–∞–Ω–∏—Ö –∑–∞ –∫–æ–¥–∞–º–∏.
 */
function groupKeysByCode(locData: LocalizationData): Map<string, LocalizationKeyText> {
    const keys: Array<LocalizationKeyText> = mapLocalizationToKeyText(locData);
    const groupMap: Map<string, LocalizationKeyText> = groupLocKeyTextByCode(keys)

    return groupMap;
}